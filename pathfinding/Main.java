/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pathfinding;

import AIToolkit.Search.InformedSearch.AStarSearch;
import AIToolkit.Distances.CosineDistance;
import AIToolkit.Distances.EuclideanDistance;
import AIToolkit.Distances.ManhattanDistance;
import AIToolkit.Search.InformedSearch.GreedySearch;
import AIToolkit.Search.InformedSearch.UniformCostSearch;
import java.awt.Color;
import java.awt.EventQueue;
import java.awt.GridLayout;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.UIManager;
import AIToolkit.Search.NonInformedSearch.BreadthFirstSearch;
import AIToolkit.Search.NonInformedSearch.DepthFirstSearch;
import AIToolkit.Search.Search;

/**
 *
 * @author luan
 */
public class Main extends javax.swing.JFrame {

    // UI references - helps to keep track of the UI elements:
    private JPanel worldPositions[][];
    private JPanel user;
    private JPanel target;
    private boolean drawing = false;
    private boolean searching = false;

    // Objects references - used to provide data to the search algorithm:
    private JPanel worldState[][];
    private State userStartLocation;
    private State userLocation;
    private State targetLocation;
    private Search searchAlgorithm;

    /**
     * Creates new form main
     */
    public Main() {
        // First of all we disable the default Swing's ugly look and feel
        EventQueue.invokeLater(() -> {
            try {
                UIManager.setLookAndFeel(UIManager.getCrossPlatformLookAndFeelClassName());
            } catch (Exception ignored) {
            }
        });

        initComponents();
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup6 = new javax.swing.ButtonGroup();
        world = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtGridX = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtGridY = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        chkDiscoveryProgress = new javax.swing.JCheckBox();
        btnPlayAnimation = new javax.swing.JButton();
        timer = new javax.swing.JSlider();
        btnNextStep = new javax.swing.JButton();
        btnResetGame = new javax.swing.JButton();
        cmbAlgorithm = new javax.swing.JComboBox();
        jPanel2 = new javax.swing.JPanel();
        chkWall = new javax.swing.JRadioButton();
        chkTarget = new javax.swing.JRadioButton();
        chkTarget1 = new javax.swing.JRadioButton();
        btnClear = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        world.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout worldLayout = new javax.swing.GroupLayout(world);
        world.setLayout(worldLayout);
        worldLayout.setHorizontalGroup(
            worldLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 551, Short.MAX_VALUE)
        );
        worldLayout.setVerticalGroup(
            worldLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 501, Short.MAX_VALUE)
        );

        jLabel1.setText("Grid:");

        txtGridX.setText("10");
        txtGridX.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtGridXActionPerformed(evt);
            }
        });

        jLabel2.setText("X:");

        txtGridY.setText("10");
        txtGridY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtGridYActionPerformed(evt);
            }
        });

        jLabel3.setText("y:");

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Results"));

        chkDiscoveryProgress.setText("Discovery progress");
        chkDiscoveryProgress.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        chkDiscoveryProgress.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        chkDiscoveryProgress.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        chkDiscoveryProgress.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
        chkDiscoveryProgress.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkDiscoveryProgressActionPerformed(evt);
            }
        });

        btnPlayAnimation.setText("Play animation");
        btnPlayAnimation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPlayAnimationActionPerformed(evt);
            }
        });

        timer.setMaximum(1000);
        timer.setMinimum(5);

        btnNextStep.setText("Next step");
        btnNextStep.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextStepActionPerformed(evt);
            }
        });

        btnResetGame.setText("Reset");
        btnResetGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetGameActionPerformed(evt);
            }
        });

        cmbAlgorithm.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "DFS - Depth First Search", "BFS - Breadth First Search", "UCS - Uniform Cost Search", "Greedy Search (Euclidean)", "Greedy Search (Manhattan)", "Greedy Search (Cosine)", "A* (Euclidean)", "A*  (Manhattan)", "A*  (Cosine)" }));
        cmbAlgorithm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbAlgorithmActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(cmbAlgorithm, 0, 156, Short.MAX_VALUE)
            .addComponent(btnPlayAnimation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(chkDiscoveryProgress)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(btnNextStep, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnResetGame))
            .addComponent(timer, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(chkDiscoveryProgress)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(timer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmbAlgorithm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addComponent(btnPlayAnimation)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnNextStep)
                    .addComponent(btnResetGame)))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Paint tools"));

        buttonGroup6.add(chkWall);
        chkWall.setSelected(true);
        chkWall.setText("Wall");
        chkWall.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkWallActionPerformed(evt);
            }
        });

        buttonGroup6.add(chkTarget);
        chkTarget.setText("Target");
        chkTarget.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkTargetActionPerformed(evt);
            }
        });

        buttonGroup6.add(chkTarget1);
        chkTarget1.setText("User");
        chkTarget1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkTarget1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chkWall)
                    .addComponent(chkTarget)
                    .addComponent(chkTarget1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(chkWall)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkTarget)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkTarget1)
                .addContainerGap())
        );

        btnClear.setText("Clear/apply");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtGridX, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtGridY, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(8, 8, 8))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(btnClear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtGridX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtGridY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnClear)
                .addGap(9, 9, 9)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(104, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(world, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(world, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtGridXActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtGridXActionPerformed
        init();
    }//GEN-LAST:event_txtGridXActionPerformed

    private void txtGridYActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtGridYActionPerformed
        init();
    }//GEN-LAST:event_txtGridYActionPerformed

    private void chkWallActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkWallActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkWallActionPerformed

    private void chkTargetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkTargetActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkTargetActionPerformed

    private void chkTarget1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkTarget1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkTarget1ActionPerformed

    private void chkDiscoveryProgressActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkDiscoveryProgressActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkDiscoveryProgressActionPerformed

    private void btnNextStepActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextStepActionPerformed
        runNextStep();
    }//GEN-LAST:event_btnNextStepActionPerformed

    private void cmbAlgorithmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbAlgorithmActionPerformed

    }//GEN-LAST:event_cmbAlgorithmActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        // The user wants to apply a new configuration of grid or simple 
        // start a new level:
        init();
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnPlayAnimationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPlayAnimationActionPerformed
        new Thread(() -> {
            do {
                runNextStep();

                try {
                    Thread.sleep(timer.getValue());
                } catch (Exception ignored) {
                }
            } while (searching);
        }).start();
    }//GEN-LAST:event_btnPlayAnimationActionPerformed

    private void btnResetGameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetGameActionPerformed
        new Thread(() -> {
            searchAlgorithm = null;
            userLocation = userStartLocation;

            // Clear and instanciate a new world:
            for (int x = 0; x < worldPositions.length; x++) {
                for (int y = 0; y < worldPositions[0].length; y++) {
                    Color blockType = worldPositions[x][y].getBackground();
                    if (blockType != Color.RED && blockType != Color.DARK_GRAY) {
                        worldPositions[x][y].setBackground(Color.RED);
                    }
                }
            }

            worldPositions[userStartLocation.getX()][userStartLocation.getY()].setBackground(Color.BLUE);
            worldPositions[targetLocation.getX()][targetLocation.getY()].setBackground(Color.YELLOW);

            // Force Java to update the UI of the world element:
            world.updateUI();
        }).start();
    }//GEN-LAST:event_btnResetGameActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    private void instanciateSearch() {
        worldState = worldPositions.clone();
        switch (cmbAlgorithm.getSelectedIndex()) {
            case 0:
                searchAlgorithm = new DepthFirstSearch<>(new PathFindingSearchRules(worldState, targetLocation, null));
                break;
            case 1:
                searchAlgorithm = new BreadthFirstSearch<>(new PathFindingSearchRules(worldState, targetLocation, null));
                break;
            case 2:
                searchAlgorithm = new UniformCostSearch(new PathFindingSearchRules(worldState, targetLocation, null));
                break;
            case 3:
                searchAlgorithm = new GreedySearch<>(new PathFindingSearchRules(worldState, targetLocation, new EuclideanDistance()));
                break;
            case 4:
                searchAlgorithm = new GreedySearch<>(new PathFindingSearchRules(worldState, targetLocation, new ManhattanDistance()));
                break;
            case 5:
                searchAlgorithm = new GreedySearch<>(new PathFindingSearchRules(worldState, targetLocation, new CosineDistance()));
                break;
            case 6:
                searchAlgorithm = new AStarSearch<>(new PathFindingSearchRules(worldState, targetLocation, new EuclideanDistance()));
                break;
            case 7:
                searchAlgorithm = new AStarSearch<>(new PathFindingSearchRules(worldState, targetLocation, new ManhattanDistance()));
                break;
            case 8:
                searchAlgorithm = new AStarSearch<>(new PathFindingSearchRules(worldState, targetLocation, new CosineDistance()));
                break;

        }
        searchAlgorithm.setOnSearchEvents(searchEvents);
    }

    private void runNextStep() {
        if (searchAlgorithm == null) {
            searching = true;
            instanciateSearch();
        }

        State nextStep;
        if (chkDiscoveryProgress.isSelected()) {
            ArrayList<State> discoveredTree = new ArrayList<>();
            nextStep = (State) searchAlgorithm.goToNextStep(userLocation, discoveredTree);
            for (State discovered : discoveredTree) {
                if (worldPositions[discovered.getX()][discovered.getY()].getBackground() != Color.YELLOW) {
                    worldPositions[discovered.getX()][discovered.getY()].setBackground(Color.ORANGE);
                }
            }
        } else {
            nextStep = (State) searchAlgorithm.goToNextStep(userLocation);
        }

        worldPositions[nextStep.getX()][nextStep.getY()].setBackground(Color.CYAN);
        System.out.println("Painting position: " + nextStep);
        userLocation = nextStep;
        // this.world.updateUI();
    }

    /**
     * Animate the result that was founded.
     *
     * @param path The path to the target.
     */
    private void animateResults(ArrayList<State> path) {
        new Thread(() -> {
            worldPositions[userStartLocation.getX()][userStartLocation.getY()].setBackground(Color.BLUE);
            worldPositions[targetLocation.getX()][targetLocation.getY()].setBackground(Color.YELLOW);

            for (int c = path.size() - 1; c >= 0; c--) {
                State current = path.get(c);
                worldPositions[current.getX()][current.getY()].setBackground(Color.GREEN);
                try {
                    Thread.sleep(timer.getValue());
                } catch (Exception ignored) {
                }
            }
            worldPositions[userStartLocation.getX()][userStartLocation.getY()].setBackground(Color.BLUE);
            worldPositions[targetLocation.getX()][targetLocation.getY()].setBackground(Color.YELLOW);
        }
        ).start();
    }

    private final Search.OnSearchEvents searchEvents = new Search.OnSearchEvents() {

        @Override
        public void onFinished(ArrayList path) {
            searching = false;
            animateResults(path);
        }

        @Override
        public void onImpossibleToFinish() {
            searching = false;
            JOptionPane.showMessageDialog(null, "Sorry, the search has finished but found no results.", "Search finished with no results.", JOptionPane.INFORMATION_MESSAGE);
        }
    };

    /**
     * Initiates the main components of this form.
     */
    private void init() {
        new Thread(() -> {
            // The values for the grid are required:
            if (txtGridX.getText().equals("") || txtGridY.getText().equals("")) {
                JOptionPane.showMessageDialog(null, "Please, inform the grid X and Y limits.", "", ERROR);
                return;
            }

            int gridX = Integer.parseInt(txtGridX.getText()),
                    gridY = Integer.parseInt(txtGridY.getText());

            // Clear and instanciate a new world:
            searchAlgorithm = null;
            worldPositions = new JPanel[gridX][gridY];
            world.removeAll();
            world.setLayout(new GridLayout(gridX, gridY, 1, 1));
            for (int x = 0; x < gridX; x++) {
                for (int y = 0; y < gridY; y++) {
                    worldPositions[x][y] = generateWorldPosition(new State(x, y));
                    world.add(worldPositions[x][y]);
                }
            }

            // Reset the current world representation:
            userLocation = null;
            userStartLocation = null;
            targetLocation = null;

            // Force Java to update the UI of the world element:
            world.updateUI();
        }).start();
    }

    private JPanel generateWorldPosition(State location) {
        JPanel position = new JPanel();
        position.setBackground(Color.RED);
        position.addMouseListener(new MouseAdapter() {

            @Override
            public void mouseEntered(MouseEvent e) {
                if (drawing) {
                    draw();
                }
            }

            @Override
            public void mouseReleased(MouseEvent e) {
                drawing = false;
            }

            @Override
            public void mousePressed(MouseEvent e) {
                drawing = true;
                draw();
            }

            private void draw() {
                if (chkTarget.isSelected()) {
                    if (target != null) {
                        target.setBackground(Color.RED);
                    }
                    targetLocation = location;
                    target = position;
                    target.setBackground(Color.YELLOW);
                } else if (chkWall.isSelected()) {
                    if (position.getBackground() == Color.red) {
                        position.setBackground(Color.DARK_GRAY);
                    } else {
                        position.setBackground(Color.red);
                    }
                } else if (chkTarget1.isSelected()) {
                    if (user != null) {
                        user.setBackground(Color.RED);
                    }
                    userStartLocation = location;
                    userLocation = location;
                    user = position;
                    user.setBackground(Color.BLUE);
                }
            }

        });
        return position;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnNextStep;
    private javax.swing.JButton btnPlayAnimation;
    private javax.swing.JButton btnResetGame;
    private javax.swing.ButtonGroup buttonGroup6;
    private javax.swing.JCheckBox chkDiscoveryProgress;
    private javax.swing.JRadioButton chkTarget;
    private javax.swing.JRadioButton chkTarget1;
    private javax.swing.JRadioButton chkWall;
    private javax.swing.JComboBox cmbAlgorithm;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JSlider timer;
    private javax.swing.JTextField txtGridX;
    private javax.swing.JTextField txtGridY;
    private javax.swing.JPanel world;
    // End of variables declaration//GEN-END:variables
}
